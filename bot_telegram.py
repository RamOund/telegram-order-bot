import re
import pymysql
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import os

host = '31.31.196.85'
user = 'u1971860_default'
password = '86KjTxZ3kZ9tWZcb'
db_name = 'u1971860_default'

try:
    connection = pymysql.connect(
        host=host,
        port=3306,
        user=user,
        password=password,
        database=db_name,
        cursorclass=pymysql.cursors.DictCursor
    )
    print('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
except Exception as ex:
    print('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å')
    print(ex)


class FSMClient(StatesGroup):
    # –•—Ä–∞–Ω–∏—Ç —ç—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    start_order_selected = State()
    name_select = State()
    teleph_num_select = State()
    email_select = State()
    address_select = State()
    answ_client_select = State()
    prod_select = State()
    amount_prod = State()
    all_selected = State()

# bot = Bot(token=os.getenv('TOKEN'))
bot = Bot(token='5649931003:bottoken')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def on_startup(_):
    print('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç')

# async def on_shutdown(dp):
#     await bot.delete_webhook()

@dp.message_handler(commands=['site'])
async def site(message: types.Message):
    await message.answer('–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç - http://test.site/')

@dp.message_handler(commands=['start'])
async def start_step(message: types.Message, state: FSMContext) -> None:
    msg = '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–º–ø–∞–Ω–∏—é. –ï—Å–ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ "–î–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'

    y_btn = KeyboardButton('–î–∞')
    n_btn = KeyboardButton('–ù–µ—Ç')

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(y_btn,n_btn)

    await message.answer(msg, reply_markup=markup)
    await state.set_state(FSMClient.start_order_selected)

@dp.message_handler(state=FSMClient.start_order_selected)
async def first_step(message: types.Message, state:FSMContext):
    user_msg = message.text
    tg_user_id = message.from_user.id
    if user_msg == '–î–∞':
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT * FROM `client` WHERE tg_id_client='{tg_user_id}'")
            result = cursor.fetchone()
            connection.commit()
            if result is None:
                await message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª—è—Ç—å—Å—è –∑–∞–∫–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä:"–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ", –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É –æ—Ç—á–µ—Å—Ç–≤–∞, —Ç–æ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ù–µ—Ç, –∫ –ø—Ä–∏–º–µ—Ä—É: "–§–∞–º–∏–ª–∏—è –ò–º—è –ù–µ—Ç".')
                await state.update_data(tg_u_id=tg_user_id)
                await state.set_state(FSMClient.name_select)
            else:
                with connection.cursor() as cursor:
                    surname = f"SELECT surname FROM `client` WHERE tg_id_client='{tg_user_id}'"
                    cursor.execute(surname)
                    surname = cursor.fetchone()['surname']
                with connection.cursor() as cursor:
                    name = f"SELECT name from `client` WHERE tg_id_client='{tg_user_id}'"
                    cursor.execute(name)
                    name=cursor.fetchone()['name']
                with connection.cursor() as cursor:
                    pathonimic = f"SELECT pathonimic from `client` WHERE tg_id_client='{tg_user_id}'"
                    cursor.execute(pathonimic)
                    pathonimic=cursor.fetchone()['pathonimic']
                with connection.cursor() as cursor:
                    mob_num = f"select tel_num from `client` where tg_id_client='{tg_user_id}'"
                    cursor.execute(mob_num)
                    mob_num=cursor.fetchone()['tel_num']
                with connection.cursor() as cursor:
                    email = f"select email from `client` where tg_id_client='{tg_user_id}'"
                    cursor.execute(email)
                    email=cursor.fetchone()['email']
                fullname = surname + ' ' + name + ' ' + pathonimic
                await state.update_data(tg_u_id=tg_user_id)
                await state.update_data(name=fullname)
                await state.update_data(telephon_num=mob_num)
                await state.update_data(email=email)
                await message.answer(f'–í—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –≤—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑–µ.\n–í–∞—à–µ –§–ò–û: {fullname}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {mob_num}\n–í–∞—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {email}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–æ–ª–∂–Ω–∞ –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É. –§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º –∏ —Ç.–¥.')
                await state.set_state(FSMClient.address_select)
    elif user_msg =='–ù–µ—Ç':
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠')
        await state.finish()

@dp.message_handler(state=FSMClient.name_select)
async def second_step(message: types.Message, state:FSMContext):
    user_msg = message.text
    if user_msg.count(' ') == 2:
        spl = user_msg.split()
        name = spl[1]
        await state.update_data(name=user_msg)
        await message.answer(f'–•–æ—Ä–æ—à–æ, {name}, –ø—Ä–æ–¥–æ–ª–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.')
        await state.set_state(FSMClient.teleph_num_select)
    elif user_msg == '/end':
        await state.finish()
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠ –ü–∏—à–∏—Ç–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    else:
        await message.answer('–£–≤—ã, –Ω–æ –ø–æ—Ö–æ–∂–µ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–∞–±–æ—Ä–µ –§–ò–û, –∞ –∏–º–µ–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≥–¥–µ-—Ç–æ –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.')

@dp.message_handler(state=FSMClient.teleph_num_select)
async def third_step(message: types.Message, state:FSMContext):
    user_msg = message.text
    if len(user_msg) == 11:
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT * FROM `client` WHERE tel_num='{user_msg}'")
            client_id = cursor.fetchone()
            connection.commit()
            if client_id is None:
                await state.update_data(telephon_num=user_msg)
                await message.answer('–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.')
                await state.set_state(FSMClient.email_select)
            else:
                await message.answer(('–£–≤—ã, –Ω–∞ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'))
    elif user_msg == '/end':
        await state.finish()
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠ –ü–∏—à–∏—Ç–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    else:
        tr_user_msg = re.sub(r'[+.,()-]', '', user_msg)
        if len(tr_user_msg) == 11:
            with connection.cursor() as cursor:
                cursor.execute(f"SELECT * FROM `client` WHERE tel_num='{user_msg}'")
                client_id = cursor.fetchone()
                connection.commit()
                if client_id is None:
                    await state.update_data(telephon_num=user_msg)
                    await message.answer('–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.')
                    await state.set_state(FSMClient.email_select)
                else:
                    await message.answer(('–£–≤—ã, –Ω–∞ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'))
        else:
            await message.answer('–£–ø—Å, –≤–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –æ—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π')

@dp.message_handler(state=FSMClient.email_select)
async def four_step(message: types.Message, state:FSMContext):
    user_msg = message.text
    ch1 = '.'
    ch2 = '@'
    if ch1 in user_msg and ch2 in user_msg:
        await state.update_data(email=user_msg)
        await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É. –§–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º –∏ —Ç.–¥.')
        await state.set_state(FSMClient.address_select)
    elif user_msg == '/end':
        await state.finish()
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠ –ü–∏—à–∏—Ç–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    else:
        await message.answer(f'–£–ø—Å. –í –∞–¥—Ä–µ—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ –≤ –∞–¥—Ä–µ—Å–µ –æ—Ç—Å—Ç—É—Å—Ç–≤—É—é—Ç —Å–∏–º–≤–æ–ª {ch1} –∏–ª–∏ {ch2}.')

@dp.message_handler(state=FSMClient.address_select)
async def third_step(message: types.Message, state:FSMContext):
    user_msg = message.text
    if user_msg == '/end':
        await state.finish()
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠ –ü–∏—à–∏—Ç–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    else:
        f_btn = KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è')
        s_btn = KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(f_btn, s_btn)

        await state.update_data(address_client=user_msg)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –≤—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º –≤ –∫–æ–º–ø–∞–Ω–∏—é.', reply_markup=markup)
        await state.set_state(FSMClient.answ_client_select)


@dp.message_handler(state=FSMClient.answ_client_select)
async def five_step(message: types.Message, state:FSMContext):
    user_msg = message.text
    if user_msg == '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è':
        await state.update_data(answ_client=user_msg)

        c1_btn = KeyboardButton('BOLID V-1')
        c2_btn = KeyboardButton('BOLID V-2')
        c3_btn = KeyboardButton('BOLID V-3')
        c4_btn = KeyboardButton('BOLID V-4')
        c5_btn = KeyboardButton('BOLID V-5')
        c6_btn = KeyboardButton('BOLID V-6')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(c1_btn, c2_btn, c3_btn)
        markup.row(c4_btn, c5_btn, c6_btn)

        await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ.', reply_markup=markup)
        await state.set_state(FSMClient.prod_select)
    elif user_msg == '/end':
        await state.finish()
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠ –ü–∏—à–∏—Ç–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    elif user_msg == '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è':
        with connection.cursor() as cursor:
            getid = f"SELECT id_product FROM `product` WHERE name_product='{user_msg}'"
            cursor.execute(getid)
            getid = cursor.fetchone()['id_product']
        await state.update_data(answ_client=user_msg)
        await state.update_data(prod_sel=getid)
        await state.update_data(am_prod='')
        user_state_data = await state.get_data()
        name_sel = user_state_data['name']
        tel_num = user_state_data['telephon_num']
        em = user_state_data['email']
        adr_cl = user_state_data['address_client']
        ans_cl = user_state_data['answ_client']

        g_order_btn = KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        e_order_btn = KeyboardButton('–û—Ç–º–µ–Ω–∞')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(g_order_btn, e_order_btn)

        await message.answer(f'''üòÅ–ú—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏!üòÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n–í–∞—à–µ –§–ò–û: {name_sel}\n–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É: {ans_cl}\n–ê–¥—Ä–µ—Å: {adr_cl}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {tel_num}\ne-mail: {em}''', reply_markup=markup)
        await state.set_state(FSMClient.all_selected)
    else:
        await message.answer('–ü–æ–∫–∞ —á—Ç–æ —è –º–æ–≥—É –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è.')

@dp.message_handler(state=FSMClient.prod_select)
async def prodstep(message: types.Message, state:FSMContext):
    user_msg = message.text
    if user_msg == '/end':
        await state.finish()
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠ –ü–∏—à–∏—Ç–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    else:
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT * FROM `product` WHERE name_product='{user_msg}'")
            result = cursor.fetchone()
            connection.commit()
            if result is None:
                await message.reply('–£–≤—ã, —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —É –Ω–∞—Å –Ω–µ—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ.')
            else:
                with connection.cursor() as cursor:
                    getid = f"SELECT id_product FROM `product` WHERE name_product='{user_msg}'"
                    cursor.execute(getid)
                    getid = cursor.fetchone()['id_product']
                await state.update_data(prod_sel=getid)
                await state.update_data(prname=user_msg)
                await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç–µ.')
                await state.set_state(FSMClient.amount_prod)


@dp.message_handler(state=FSMClient.amount_prod)
async def amprod(message: types.Message, state:FSMContext):
    user_msg = message.text
    if user_msg.isnumeric() == True:
        await state.update_data(am_prod=user_msg)
        user_state_data = await state.get_data()
        name_sel = user_state_data['name']
        tel_num = user_state_data['telephon_num']
        em = user_state_data['email']
        adr_cl = user_state_data['address_client']
        ans_cl = user_state_data['answ_client']
        prod_cl = user_state_data['prod_sel']
        am_of_prod = user_state_data['am_prod']
        # pr_cl —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ prod_cl —ç—Ç–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        pr_cl = user_state_data['prname']

        g_order_btn = KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
        e_order_btn = KeyboardButton('–û—Ç–º–µ–Ω–∞')

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(g_order_btn, e_order_btn)
        await message.answer(f'''üòÅ–ú—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏!üòÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n–í–∞—à–µ –§–ò–û: {name_sel}\n–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É: {ans_cl} {pr_cl} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {am_of_prod} \n–ê–¥—Ä–µ—Å: {adr_cl}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {tel_num}\ne-mail: {em}''', reply_markup=markup)
        await state.set_state(FSMClient.all_selected)
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–æ–π.')

@dp.message_handler(state=FSMClient.all_selected)
async def finish_process(message: types.Message, state: FSMContext):
    user_msg = message.text
    if user_msg == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        user_state_data = await state.get_data()
        tg_user_id = user_state_data['tg_u_id']
        name_sel = user_state_data['name']
        ans_cl = user_state_data['answ_client']
        prod_cl = user_state_data['prod_sel']
        am_of_prod = user_state_data['am_prod']
        adr_cl = user_state_data['address_client']
        tel_num = user_state_data['telephon_num']
        em = user_state_data['email']
        # pr_cl —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ prod_cl —ç—Ç–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        if am_of_prod == '':
            msg = f'''ü§ù–í–∞—à –∑–∞–∫–∞–∑: –Ω–∞ –∏–º—è {name_sel}, –ø–æ –≤–æ–ø—Ä–æ—Å—É {ans_cl} , –Ω–∞ –∞–¥—Ä–µ—Å {adr_cl} –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏: {tel_num} –∏ {em}. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: {tg_user_id}ü§ù'''
            await message.answer(msg)
        else:
            msg = f'''ü§ù–í–∞—à –∑–∞–∫–∞–∑: –Ω–∞ –∏–º—è {name_sel}, –ø–æ –≤–æ–ø—Ä–æ—Å—É {ans_cl}   –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {am_of_prod}, –Ω–∞ –∞–¥—Ä–µ—Å {adr_cl} –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏: {tel_num} –∏ {em}. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: {tg_user_id}ü§ù'''
            await message.answer(msg)

        spl = name_sel.split()
        surname = spl[0]
        name = spl[1]
        pathonimic = spl[2]
        try:
            with connection.cursor() as cursor:
                cursor.execute(f"SELECT * FROM `client` WHERE tg_id_client='{tg_user_id}'")
                client_id = cursor.fetchone()
                connection.commit()
                if client_id is None:
                    if not am_of_prod:
                        print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è')
                        # insert data
                        with connection.cursor() as cursor:
                            insert_query1 = f"INSERT INTO `client` (tg_id_client, surname, name, pathonimic, tel_num, email) VALUES ('{tg_user_id}', '{surname}', '{name}', '{pathonimic}', '{tel_num}', '{em}')"
                            cursor.execute(insert_query1)
                            id_client = cursor.lastrowid
                            connection.commit()

                        with connection.cursor() as cursor:
                            insert_query2 = f"INSERT INTO orders (id_client, id_employee, address_client, date_ad, state) VALUES ('{id_client}', '1', '{adr_cl}', NOW(), '–ù–æ–≤—ã–π');"
                            cursor.execute(insert_query2)
                            id_order = cursor.lastrowid
                            connection.commit()

                        with connection.cursor() as cursor:
                            insert_query3 = f"INSERT INTO `order_list` (id_order, id_product, amount) VALUES ('{id_order}', '{prod_cl}', '{am_of_prod}');"
                            cursor.execute(insert_query3)
                            connection.commit()
                    else:
                        print('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è')
                        # insert data
                        with connection.cursor() as cursor:
                            insert_query1 = f"INSERT INTO `client` (tg_id_client, surname, name, pathonimic, tel_num, email) VALUES ('{tg_user_id}', '{surname}', '{name}', '{pathonimic}', '{tel_num}', '{em}')"
                            cursor.execute(insert_query1)
                            id_client = cursor.lastrowid
                            connection.commit()

                        with connection.cursor() as cursor:
                            insert_query2 = f"INSERT INTO orders (id_client, id_employee, address_client, date_ad, state) VALUES ('{id_client}', '1', '{adr_cl}', NOW(), '–ù–æ–≤—ã–π');"
                            cursor.execute(insert_query2)
                            id_order = cursor.lastrowid
                            connection.commit()

                        with connection.cursor() as cursor:
                            insert_query3 = f"INSERT INTO `order_list` (id_order, id_product, amount) VALUES ('{id_order}', '{prod_cl}', '{am_of_prod}');"
                            cursor.execute(insert_query3)
                            connection.commit()
                else:
                    if not am_of_prod:
                        with connection.cursor() as cursor:
                            id_client = f"SELECT id_client FROM `client` WHERE tg_id_client='{tg_user_id}'"
                            cursor.execute(id_client)
                            id_client = cursor.fetchone()['id_client']

                        with connection.cursor() as cursor:
                            insert_query2 = f"INSERT INTO orders (id_client, id_employee, address_client, date_ad, state) VALUES ('{id_client}', '1', '{adr_cl}', NOW(), '–ù–æ–≤—ã–π');"
                            cursor.execute(insert_query2)
                            id_order = cursor.lastrowid
                            connection.commit()

                        with connection.cursor() as cursor:
                            insert_query3 = f"INSERT INTO `order_list` (id_order, id_product, amount) VALUES ('{id_order}', '{prod_cl}', '{am_of_prod}');"
                            cursor.execute(insert_query3)
                            connection.commit()
                    else:
                        with connection.cursor() as cursor:
                            id_client = f"SELECT id_client FROM `client` WHERE tg_id_client='{tg_user_id}'"
                            cursor.execute(id_client)
                            id_client = cursor.fetchone()['id_client']

                        with connection.cursor() as cursor:
                            insert_query2 = f"INSERT INTO orders (id_client, id_employee, address_client, date_ad, state) VALUES ('{id_client}', '1', '{adr_cl}', NOW(), '–ù–æ–≤—ã–π');"
                            cursor.execute(insert_query2)
                            id_order = cursor.lastrowid
                            connection.commit()

                        with connection.cursor() as cursor:
                            insert_query3 = f"INSERT INTO `order_list` (id_order, id_product, amount) VALUES ('{id_order}', '{prod_cl}', '{am_of_prod}');"
                            cursor.execute(insert_query3)
                            connection.commit()
        finally:
            # connection.close()
            print('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ')
    else:
        await message.answer('üò≠–î–æ —Å–≤–∏–¥–∞–Ω–∏—èüò≠')
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

# executor.start_webhook(
#     dispatcher=dp,
#     webhook_path='',
#     on_startup=on_startup,
#     on_shutdown=on_shutdown,
#     skip_updates=True,
#     host='31.31.196.85',
#     port=3306
# )
